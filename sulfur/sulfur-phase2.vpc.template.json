{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "This template creates a VPC with private and public subnets. It is designed to be embedded in other templates using AWS::CloudFormation::Stack resource.",

  "Parameters": {
    "Environment": {
      "Description": "The name of the environment for this stack",
      "Type": "String",
      "Default": "production",
      "AllowedValues": [ "production","staging","development"],
      "ConstraintDescription": "must be one of production, staging or development"
    },
    "StackName": {
      "Description": "The name of the stack",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "128"
    },
    "Domain": {
      "Description": "The domain name for this stack. This should be a valid domain registered in Route 53, without a trailing '.'",
      "Type": "String",
      "Default": "sulfur.erinin.net",
      "MinLength": "4",
      "MaxLength": "92"
    }
  },

  "Mappings": {

    "Env2Net": {
      "production": { "vpcnet": "10.0.16.0/20", "pubnet": "10.0.16.0/24", "webnet": "10.0.17.0/24", "weblbnet": "10.0.20.0/24", "dbnet": "10.0.18.0/24", "dblbnet": "10.0.21.0/24", "serversnet": "10.0.16.0 255.255.252.0" },
      "development": { "vpcnet": "10.0.48.0/20", "pubnet": "10.0.48.0/24", "webnet": "10.0.49.0/24",  "weblbnet": "10.0.52.0/24", "dbnet": "10.0.50.0/24", "dblbnet": "10.0.53.0/24", "serversnet": "10.0.48.0 255.255.252.0" },
      "staging": { "vpcnet": "10.0.32.0/20", "pubnet": "10.0.32.0/24", "webnet": "10.0.33.0/24", "weblbnet": "10.0.36.0/24", "dbnet": "10.0.34.0/24", "dblbnet": "10.0.37.0/24", "serversnet": "10.0.32.0 255.255.252.0" }
    }
  },

  "Resources": {


    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {"Fn::FindInMap": [ "Env2Net", { "Ref": "Environment" }, "vpcnet" ] },
        "Tags": [ 
          {"Key": "Application", "Value": { "Ref": "StackName"} },
          {"Key": "Environment", "Value": { "Ref": "Environment"} }
        ]
      }
    },
    "DHCPOptions": {
      "Type" : "AWS::EC2::DHCPOptions",
      "Properties" : {
        "DomainName" : {"Ref": "Domain"},
        "DomainNameServers" : ["AmazonProvidedDNS"],
        "Tags" : [
          {"Key": "Environment", "Value": {"Ref": "Environment"}},
          {"Key": "Application", "Value": {"Ref": "StackName"}}
        ]
      }
    },

    "AttachDHCPOptions": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "DhcpOptionsId": {"Ref": "DHCPOptions"}
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock":  {"Fn::FindInMap": [ "Env2Net", { "Ref": "Environment" }, "pubnet" ] },
        "Tags": [ 
          {"Key": "Application", "Value": { "Ref": "StackName"} },
          {"Key": "Environment", "Value": { "Ref": "Environment"} },
          {"Key": "Network", "Value": "Public" }
        ]
      }
    },

    "Gateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [ 
          {"Key": "Application", "Value": { "Ref": "StackName"} },
          {"Key": "Environment", "Value": { "Ref": "Environment"} },
          {"Key": "Network", "Value": "Public" }
        ]
      }
    },

    "AttachGateway": {
       "Type": "AWS::EC2::VPCGatewayAttachment",
       "Properties": {
         "VpcId": { "Ref": "VPC" },
         "InternetGatewayId": { "Ref": "Gateway" }
       }
    },

    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [ 
          {"Key": "Application", "Value": { "Ref": "StackName"} },
          {"Key": "Environment", "Value": { "Ref": "Environment"} },
          {"Key": "Network", "Value": "Public" }
        ]
      }
    },

    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "Gateway" }
      }
    },

    "PublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },

    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [ 
          {"Key": "Application", "Value": { "Ref": "StackName"} },
          {"Key": "Environment", "Value": { "Ref": "Environment"} },
          {"Key": "Network", "Value": "Public" }
        ]
      }
    },

    "InboundSSHNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "22", "To": "22"}
      }
    },

    "InboundSSLNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "443", "To": "443"}
      }
    },

    "InboundWebProxyNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {"Fn::FindInMap": [ "Env2Net", { "Ref": "Environment" }, "webnet" ] },
        "PortRange": {"From": "3128", "To": "3128"}
      }
    },

    "InboundDBProxyNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {"Fn::FindInMap": [ "Env2Net", { "Ref": "Environment" }, "dbnet" ] },
        "PortRange": {"From": "3128", "To": "3128"}
      }
    },

    "InboundVPNNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "104",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "1194", "To": "1194"}
      }
    },

    "InboundResponseNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "120",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "32768", "To": "61000"}
      }
    },

    "OutBoundResponsePortsTCPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "1024", "To": "65535"}
      }
    },

    "OutBoundResponsePortsUDPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "101",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "1024", "To": "65535"}
      }
    },

    "OutboundHTTPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "80", "To": "80"}
      }
    },

    "OutboundHTTPSNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "443", "To": "443"}
      }
    },

    "OutboundSSHWebNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "104",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": {"Fn::FindInMap": [ "Env2Net", { "Ref": "Environment" }, "webnet" ] },
        "PortRange": {"From": "22", "To": "22"}
      }
    },

    "OutboundSSHDBNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "105",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": {"Fn::FindInMap": [ "Env2Net", { "Ref": "Environment" }, "dbnet" ] },
        "PortRange": {"From": "22", "To": "22"}
      }
    },

    "PublicNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet" },
        "NetworkAclId": { "Ref": "PublicNetworkAcl" }
      }
    },

    "WebSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": {"Fn::FindInMap": [ "Env2Net", { "Ref": "Environment" }, "webnet" ] },
        "Tags": [
          {"Key": "Application", "Value": { "Ref": "StackName"} },
          {"Key": "Environment", "Value": { "Ref": "Environment"} },
          {"Key": "Network", "Value": "PrivateWeb" }
        ]
      }
    },

    "WebRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {"Key": "Application", "Value": { "Ref": "StackName"} },
          {"Key": "Environment", "Value": { "Ref": "Environment"} },
          {"Key": "Network", "Value": "PrivateWeb" }
        ]
      }
    },

    "WebSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "WebSubnet" },
        "RouteTableId": { "Ref": "WebRouteTable" }
      }
    },

    "WebNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {"Key": "Application", "Value": { "Ref": "StackName"} },
          {"Key": "Environment", "Value": { "Ref": "Environment"} },
          {"Key": "Network", "Value": "PrivateWeb" }
        ]
      }
    },

    "InboundWebNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "WebNetworkAcl"},
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "0", "To": "65535"}
      }
    },

    "OutBoundWebNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "WebNetworkAcl"},
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "0", "To": "65535"}
      }
    },

    "WebNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "WebSubnet" },
        "NetworkAclId": { "Ref": "WebNetworkAcl" }
      }
    },

    "LBSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock":  {"Fn::FindInMap": [ "Env2Net", { "Ref": "Environment" }, "weblbnet" ] },
        "Tags": [
          {"Key": "Application", "Value": { "Ref": "StackName"} },
          {"Key": "Environment", "Value": { "Ref": "Environment"} },
          {"Key": "Network", "Value": "LB" }
        ]
      }
    },

    "LBRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "LBRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "Gateway" }
      }
    },

    "LBRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {"Key": "Application", "Value": { "Ref": "StackName"} },
          {"Key": "Environment", "Value": { "Ref": "Environment"} },
          {"Key": "Network", "Value": "LB" }
        ]
      }
    },

    "LBSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "LBSubnet" },
        "RouteTableId": { "Ref": "LBRouteTable" }
      }
    },

    "LBNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {"Key": "Application", "Value": { "Ref": "StackName"} },
          {"Key": "Environment", "Value": { "Ref": "Environment"} },
          {"Key": "Network", "Value": "LB" }
        ]
      }
    },

    "InboundHTTPLBNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "LBNetworkAcl"},
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "80", "To": "80"}
      }
    },

    "InboundHTTPSLBNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "LBNetworkAcl"},
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "443", "To": "443"}
      }
    },

    "InboundLBNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "LBNetworkAcl"},
        "RuleNumber": "120",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "1024", "To": "65535"}
      }
    },

    "OutBoundHTTPLBNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "LBNetworkAcl"},
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": {"Fn::FindInMap": [ "Env2Net", { "Ref": "Environment" }, "webnet" ] },
        "PortRange": {"From": "80", "To": "80"}
      }
    },

    "OutBoundHTTPSLBNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "LBNetworkAcl"},
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": {"Fn::FindInMap": [ "Env2Net", { "Ref": "Environment" }, "webnet" ] },
        "PortRange": {"From": "443", "To": "443"}
      }
    },
    "OutBoundLBNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "LBNetworkAcl"},
        "RuleNumber": "120",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "1024", "To": "65535"}
      }
    },

    "LBNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "LBSubnet" },
        "NetworkAclId": { "Ref": "LBNetworkAcl" }
      }
    },

    "DBSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": {"Fn::FindInMap": [ "Env2Net", { "Ref": "Environment" }, "dbnet" ] },
        "Tags": [
          {"Key": "Application", "Value": { "Ref": "StackName"} },
          {"Key": "Environment", "Value": { "Ref": "Environment"} },
          {"Key": "Network", "Value": "PrivateDB" }
        ]
      }
    },

    "DBRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {"Key": "Application", "Value": { "Ref": "StackName"} },
          {"Key": "Environment", "Value": { "Ref": "Environment"} },
          {"Key": "Network", "Value": "PrivateDB" }
        ]
      }
    },

    "DBSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "DBSubnet" },
        "RouteTableId": { "Ref": "DBRouteTable" }
      }
    },

    "DBNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {"Key": "Application", "Value": { "Ref": "StackName"} },
          {"Key": "Environment", "Value": { "Ref": "Environment"} },
          {"Key": "Network", "Value": "PrivateDB" }
        ]
      }
    },

    "InboundDBNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "DBNetworkAcl"},
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "0", "To": "65535"}
      }
    },

    "OutBoundDBNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "DBNetworkAcl"},
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "0", "To": "65535"}
      }
    },

    "DBNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "DBSubnet" },
        "NetworkAclId": { "Ref": "DBNetworkAcl" }
      }
    }
  },
  
  "Outputs": {
    "VPC": {
      "Value": {"Ref": "VPC" },
      "Description": "The logical name of the created VPC"
    },
    "PublicSubnetID" : {
      "Value": {"Ref": "PublicSubnet" },
      "Description": "The ID of the Public Subnet"
    },
    "WebSubnetID" : {
      "Value": {"Ref": "WebSubnet" },
      "Description": "The ID of the Front-end servers Subnet"
    },
    "WebELBSubnet" : {
      "Value": {"Ref": "LBSubnet" },
      "Description": "The ID of the web server's ELB Subnet"
    },
    "DBSubnetID" : {
      "Value": {"Ref": "DBSubnet" },
      "Description": "The ID of the database servers' Subnet"
    },
    "WebRouteTable": {
      "Value": {"Ref": "WebRouteTable" },
      "Description": "The logical name of the Web routing table."
    },
    "DBRouteTable": {
      "Value": {"Ref": "DBRouteTable" },
      "Description": "The logical name of the DB servers' routing table."
    },
    "WebServerNetwork": {
      "Value": {"Fn::FindInMap": [ "Env2Net", { "Ref": "Environment" }, "webnet" ]},
      "Description": "The network address (with a bitmask) used by web servers (must be in the private ranges)."
    },
    "DBServerNetwork": {
      "Value": {"Fn::FindInMap": [ "Env2Net", { "Ref": "Environment" }, "dbnet" ]},
      "Description": "The network address (with a bitmask) used by DB servers (must be in the private ranges)."
    },
    "ServersNetwork": {
      "Value": {"Fn::FindInMap": [ "Env2Net", { "Ref": "Environment" }, "serversnet" ]},
      "Description": "The IP address and netmask (separated by space eg. 10.0.0.0 255.255.240.0) that is used by servers (must be in the private ranges)."
    }
  }
}
