{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "This template creates a Web instance in a private subnet inside a VPC. The Web EC2 instance is not assigned an Elastic IP address and relies on an ELB and a Proxy to communicate with the external world.",

  "Parameters" : {

    "InstanceType" : {
      "Description" : "Web Server EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription": "must be a valid EC2 instance type. running a t1.micro inside a VPC is unsupported by AWS at the moment!"
    },

    "StackName": {
      "Description": "The name of the stack",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "128"
    },

    "VPC": {
      "Description": "The name of the VPC in which the server should spawn",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "128"
    },

    "NetworkID": {
      "Type": "String",
      "MinLength": "4",
      "MaxLength": "50",
      "Description": "The Subnet ID to be used by the web instances (must be a private network)."
    },

    "DataVolumeSize" : {
      "Description" : "Web Server data size (in GB). Due to RAID1+0 the actual available space will be 1/2 of the specified here.",
      "Type" : "Number",
      "Default" : "1",
      "MinValue" : "1",
      "MaxValue" : "1024",
      "ConstraintDescription" : "must be between 1GB and 1024GB."
    },

    "KeyName" : {
      "Description" : "KeyPair for SSH access to the instances. It must exist.",
      "Type" : "String"
    },

    "Environment" : {
      "Description" : "The name of the environment for this stack",
      "Type" : "String",
      "Default" : "production",
      "AllowedValues" : ["production", "staging", "development" ],
      "ConstraintDescription" : "must be one of production, staging or development"
    },
    
    "BastionInstanceIP": {
      "Description": "The internal IP address assigned to the Bastion Instance",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "128"
    },

    "VPNNetwork": {
      "Type": "String",
      "MinLength": "11",
      "MaxLength": "23",
      "Description": "The network to be used by the VPN (must be in the private ranges).",
      "AllowedPattern": "^(10\\.\\d{1,3}|172\\.([12]\\d|3[01])|192\\.168)\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}$" 
    },

    "S3Bucket" : {
      "Description" : "An S3 Bucket containing private files",
      "Type" : "String",
      "Default" : "sulfur-private"
    },

    "ChefRepo": {
      "Description": "The Git repository that holds the chef recipes. At the moment this must be a public repository, a method for authentication is not provisioned yet.",
      "Type": "String",
      "Default": "https://github.com/zorlem/chef-cookbooks-repo.git",
      "MinLength": "10",
      "AllowedPattern": "^(http|https|git)://.*" 
    }
  },
  "Mappings" : {
    "Region2S3Bucket": {
      "us-east-1"      : { "s3bucket" : "https://s3.amazonaws.com/cf-templates-50la4ncl8fi9-us-east-1/" },
      "eu-west-1"      : { "s3bucket" : "https://s3.amazonaws.com/cf-templates-50la4ncl8fi9-eu/" }
    },
    "RegionArch2AMI" : {
      "us-east-1"      : { "32" : "ami-c5b202ac", "64" : "ami-c7b202ae" },
      "us-west-1"      : { "32" : "ami-b988acfc", "64" : "ami-bb88acfe" },
      "us-west-2"      : { "32" : "ami-184fc128", "64" : "ami-1a4fc12a" },
      "eu-west-1"      : { "32" : "ami-534a4b27", "64" : "ami-5d4a4b29" },
      "sa-east-1"      : { "32" : "ami-68c91075", "64" : "ami-6ac91077" },
      "ap-southeast-1" : { "32" : "ami-923575c0", "64" : "ami-903575c2" },
      "ap-northeast-1" : { "32" : "ami-8676ca87", "64" : "ami-8876ca89" }
    },
    "InstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "32" },
      "m1.small"    : { "Arch" : "32" },
      "m1.medium"   : { "Arch" : "64" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "64" },
      "c1.xlarge"   : { "Arch" : "64" }
    }
  },
  "Resources" : {
    "IAMUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path" : "/servers/content/web/"
      }
    },

    "AWSAccessKey" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : {"Ref": "IAMUser"}
      }
    },

    "WebInstancesGroup" : {
      "Type" : "AWS::IAM::Group",
      "Properties" : {
        "Path" : "/servers/content/web/"
      }
    },

    "AddWebInstancesGroup" : {
      "Type" : "AWS::IAM::UserToGroupAddition",
      "Properties" : {
        "GroupName" : { "Ref" : "WebInstancesGroup" },
        "Users" : [ { "Ref" : "IAMUser" } ]
      }
    },

    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC" },
        "GroupDescription" : "Enable secure access to the Web",
        "SecurityGroupIngress" : [
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": {"Ref": "VPNNetwork" } },
          { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": {"Ref": "VPNNetwork" } },
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": {"Ref": "VPNNetwork" } }
         ]
      }
    },

    "WebInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap": [ "RegionArch2AMI", { "Ref": "AWS::Region" }, { "Fn::FindInMap": [ "InstanceType2Arch", { "Ref": "InstanceType" }, "Arch" ] } ] },
        "SecurityGroupIds" : [{ "Ref" : "SecurityGroup" }],
        "SubnetId" : { "Ref" : "NetworkID" },
        "InstanceType" : { "Ref" : "InstanceType" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",

            "set -e -x\n",
            "export CHEF_RDIR='/usr/local/share/chef-solo'\n",
            "export PROXY_ADDRESS=http://", {"Ref": "BastionInstanceIP" }, ":3128/\n",
            "export http_proxy=$PROXY_ADDRESS\n",
            "export https_proxy=$PROXY_ADDRESS\n",
            "export ftp_proxy=$PROXY_ADDRESS\n",
            "cat << EOF >> /etc/bash.bashrc\n",
            "export http_proxy=$PROXY_ADDRESS\n",
            "export https_proxy=$PROXY_ADDRESS\n",
            "export ftp_proxy=$PROXY_ADDRESS\n",
            "EOF\n",
            "cat << EOF >> /etc/apt/apt.conf.d/95proxy\n",
            "Acquire::http::proxy \"$PROXY_ADDRESS\";\n",
            "Acquire::ftp::proxy \"$PROXY_ADDRESS\";\n",
            "Acquire::https::proxy \"$PROXY_ADDRESS\";\n",
            "EOF\n",
            "signalid=$RANDOM\n",
            "function error_exit\n",
            "{\n",
            "  date +%s\n",
            "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
            "  exit 1\n",
            "}\n",

            "function signal_success\n",
            "{\n",
            "  date +%s\n",
            "  cfn-signal -e 0 -d \"$1\" -i \"$((signalid++))\" '", { "Ref" : "WaitHandle" }, "'\n",
            "}\n",

            "export DEBIAN_FRONTEND=noninteractive\n",
            "apt-get --yes --quiet install python-setuptools || error_exit 'Failed to install python-setuptools'\n",
            "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.0-6.tar.gz || error_exit 'Failed to install CFN scripts'\n",
            "signal_success 'Web Server initialization - CFN'\n",
            "cat << EOF >> /home/ubuntu/.s3cfg\n",
            "[default]\n",
            "access_key = ", { "Ref" : "AWSAccessKey" }, "\n",
            "secret_key = ", { "Fn::GetAtt" : [ "AWSAccessKey", "SecretAccessKey" ] }, "\n",
            "use_https = True\n",
            "EOF\n",
            "echo \"deb http://apt.opscode.com/ `lsb_release -cs`-0.10 main\" | tee /etc/apt/sources.list.d/opscode.list\n",
            "gpg --keyserver keys.gnupg.net --recv-keys 83EF826A || gpg --keyserver pgp.mit.edu --recv-keys 83EF826A || error_exit 'Failed to obtain opscode PGP key'\n",
            "gpg --export packages@opscode.com > /etc/apt/trusted.gpg.d/opscode-keyring.gpg\n",
            "apt-get --yes --quiet update || error_exit 'Failed to update APT listing'\n",
            "echo \"chef chef/chef_server_url string none\" | debconf-set-selections\n",
            "apt-get --quiet --yes install opscode-keyring chef || error_exit 'Failed to install chef and opscode-keyring'\n",
            "signal_success 'Web Server initialization - Chef installation'\n",
            "apt-get --yes --quiet upgrade\n",
            "apt-get --yes --quiet install git-core ssl-cert s3cmd mdadm xfsprogs lvm2 || error_exit 'Failed to install git'\n",
            "cat << EOF > /etc/chef/solo.rb\n",
            "log_level :info\n",
            "log_location STDOUT\n",
            "file_cache_path \"$CHEF_RDIR\"\n",
            "cookbook_path \"$CHEF_RDIR/cookbooks\"\n",
            "data_bag_path \"$CHEF_RDIR/data_bags\"\n",
            "http_proxy \"$PROXY_ADDRESS\"\n",
            "https_proxy \"$PROXY_ADDRESS\"\n",
            "json_attribs \"/etc/chef/node.json\"\n",
            "EOF\n",
            "mkdir /root/.chef/\n",
            "cat << EOF >> /root/.chef/knife.rb\n",
            "http_proxy \"$PROXY_ADDRESS\"\n",
            "https_proxy \"$PROXY_ADDRESS\"\n",
            "log_level :info\n",
            "log_location STDOUT\n",
            "cache_type \"BasicFile\"\n",
            "EOF\n",
            "cat << EOF > /etc/chef/node.json\n",
            "{\n\t\"nginx\": {\n",
            "\t\t\"version\":\"1.0.11\",\n",
            "\t\t\"init_style\":\"sysvinit\",\n",
            "\t\t\"source\": {\n",
            "\t\t\t\"prefix\":\"/usr/local/nginx/\",\n",
            "\t\t\t\"checksum\":\"4a382de6b89ec7eae03bfc9f9716bca5567993d0ae90fbd5f75c1ea598f7d722\",\n",
            "\t\t\t\"modules\": [\n",
            "\t\t\t\t\"http_gzip_static_module\",\n",
            "\t\t\t\t\"http_ssl_module\",\n",
            "\t\t\t\t\"http_dav_module\",\n",
            "\t\t\t\t\"http_stub_status_module\",\n",
            "\t\t\t\t\"push_stream_module\",\n",
            "\t\t\t\t\"upload_module\",\n",
            "\t\t\t\t\"upload_progress_module\"\n",
            "\t\t\t],\n",
            "\t\t\t\"default_configure_flags\": [\n",
            "\t\t\t\t\"--prefix=/usr/local/nginx/\",\n",
            "\t\t\t\t\"--conf-path=/etc/nginx/nginx.conf\",\n",
            "\t\t\t\t\"--http-client-body-temp-path=/var/lib/nginx/body\",\n",
            "\t\t\t\t\"--with-debug\",\n",
            "\t\t\t\t\"--http-proxy-temp-path=/var/lib/nginx/proxy\",\n",
            "\t\t\t\t\"--http-fastcgi-temp-path=/var/lib/nginx/fastcgi\"\n",
            "\t\t\t]\n",
            "\t\t}\n",
            "\t},\n",
            "\t\"rvm\":{\n",
            "\t\t\"default_ruby\":\"1.9.3-p125\",\n",
            "\t\t\"group_users\": [\"zorlem\", \"elewis\"],\n",
            "\t\t\"global_gems\": [{\"name\": \"bundler\"}],\n",
            "\t\t\"gems\": {\n",
            "\t\t\t\"@sulfur-rails-3-2\": [{\"name\": \"nokogiri\"}],\n",
            "\t\t\t\"@sysadmin\": [{\"name\": \"s3sync\"}]\n",
            "\t\t}\n", 
            "\t},\n",
            "\t\"users\": [\"genadmin\", \"elewis\", \"zorlem\"],\n",
            "\t\"run_list\":[\"recipe[nginx::source]\",\"recipe[percona::client]\",\"recipe[user::data_bag]\",\"recipe[rvm::system]\"]\n",
            "}\n",
            "EOF\n",
            "chmod 600 /etc/chef/node.json\n",
            "git clone -b sulfur-project ", {"Ref": "ChefRepo"}, " $CHEF_RDIR >> /tmp/bootscript.log || error_exit 'Failed to install chef skeleton'\n",
            "(cd $CHEF_RDIR && git checkout -b master origin/sulfur-project)\n", 
            "mkdir -p $CHEF_RDIR/data_bags/users\n",
            "cat << EOF >> $CHEF_RDIR/data_bags/users/zorlem.json\n",
            "{\n\"id\": \"zorlem\",\n",
            "\"comment\": \"Hristo Erinin\",\n",
            "\"ssh_keygen\": \"no\",\n",
            "\"ssh_keys\": [\n",
            "\"no-port-forwarding,no-X11-forwarding ssh-rsa AAAAB3NzaC........ zorlem-greend\",\n",
            "\"no-port-forwarding,no-X11-forwarding ssh-dss AAAAB3NzaC........ zorlem-angst\"\n",
            "]\n}\n",
            "EOF\n",
            "cat << EOF >> $CHEF_RDIR/data_bags/users/sulfur-users.json\n",
            "{\n\"id\": \"genadmin\",\n",
            "\"comment\": \"Generic account for the website\",\n",
            "\"ssh_keygen\": \"no\",\n",
            "\"ssh_keys\": [\n",
            "\"no-port-forwarding,no-X11-forwarding ssh-rsa AAAAB3NzaC........ zorlem-greend\",\n",
            "\"no-port-forwarding,no-X11-forwarding ssh-dss AAAAB3NzaC........ zorlem-angst\"\n",
            "]\n}\n",
            "EOF\n",
            "cat << EOF >> $CHEF_RDIR/data_bags/users/elewis.json\n",
            "{\n\"id\": \"elewis\",\n",
            "\"comment\": \"Edward Lewis\",\n",
            "\"ssh_keygen\": \"no\",\n",
            "\"ssh_keys\": [\n",
            "\"no-port-forwarding,no-X11-forwarding ssh-rsa AAAAB3NzaC........ zorlem-greend\",\n",
            "\"no-port-forwarding,no-X11-forwarding ssh-dss AAAAB3NzaC........ zorlem-angst\"\n",
            "]\n}\n",
            "EOF\n",
            "update-rc.d chef-client disable\n",
            "service chef-client stop\n",
            "chef-solo >> /tmp/bootscript.log || error_exit 'Failed to configure the server with Chef'\n",
            "signal_success 'Web Server initialization - Chef configuration complete'\n",
            "## Waiting for EBS mounts to become available\n",
            "for disk in sdi1 sdi2; do\n",
            "   while [ ! -e /dev/${disk} ]; do echo Waiting for disk ${disk} to attach; sleep 10; done\n",
            "done\n",
            "mdadm --verbose --create /dev/md0 --level=1 --chunk=256 --raid-devices=2 /dev/sdi1 /dev/sdi2 >> /tmp/mdadm.log 2>&1\n",
            "echo '`mdadm --detail --scan`' | tee -a /etc/mdadm.conf\n",
            "## Set read-ahead on each device\n",
            "for dev in md0 sdi1 sdi2; do\n",
            "   blockdev --setra 128 /dev/${dev}\n",
            "done\n",
            "## Create physical and logical volumes\n",
            "dd if=/dev/zero of=/dev/md0 bs=512 count=1\n",
            "pvcreate /dev/md0\n",
            "vgcreate web /dev/md0\n",
            "lvcreate -l 97%vg -n web web\n",
            "## Create filesystems and mount point info\n",
            "mkfs.xfs -f /dev/web/web >> /tmp/mkxfs.log 2>&1\n",
            "mkdir /data\n",
            "echo '/dev/web/web /data xfs defaults,auto,noatime,noexec,nobootwait 0 0' | tee -a /etc/fstab\n",
            "mount /data >> /tmp/mount.log 2>&1\n",
            "echo Success\n"

        ]]}},

        "KeyName" : { "Ref" : "KeyName" },
        "Tags" : [ 
          {"Key" : "Application", "Value" : { "Ref" : "StackName"} },
          {"Key" : "Environment", "Value" : { "Ref" : "Environment"} },
          {"Key" : "ServerRole", "Value" : "Web" },
          {"Key" : "Network", "Value" : "Private" }
        ]
      }
    },

    "DataVol1" : {
      "Type" : "AWS::EC2::Volume",
      "Properties" : {
        "Size" : { "Ref" : "DataVolumeSize" },
        "AvailabilityZone" : { "Fn::GetAtt" : [ "WebInstance", "AvailabilityZone" ]}
      }
    }, 

    "DataVol2" : {
      "Type" : "AWS::EC2::Volume",
      "Properties" : {
        "Size" : { "Ref" : "DataVolumeSize" },
        "AvailabilityZone" : { "Fn::GetAtt" : [ "WebInstance", "AvailabilityZone" ]}
      }
    }, 

    "DataMountPoint1" : {
      "Type" : "AWS::EC2::VolumeAttachment",
      "Properties" : {
        "InstanceId" : { "Ref" : "WebInstance" },
        "VolumeId"  : { "Ref" : "DataVol1" },
        "Device" : "/dev/sdi1"
      }
    },

    "DataMountPoint2" : {
      "Type" : "AWS::EC2::VolumeAttachment",
      "Properties" : {
        "InstanceId" : { "Ref" : "WebInstance" },
        "VolumeId"  : { "Ref" : "DataVol2" },
        "Device" : "/dev/sdi2"
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "WebInstance",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "1200",
        "Count" : "3"
      }
    }
  },

  "Outputs": {
    "WaitHandle": {
      "Value": {"Ref": "WaitHandle" },
      "Description": "The  wait handle for the Web server."
    },
    "SecurityGroup": {
      "Value": {"Ref": "SecurityGroup" },
      "Description": "The SG of the Web server."
    },
    "InstanceID": {
      "Value": {"Ref": "WebInstance" },
      "Description": "The Instance name/ID of the Web server."
    },
    "ServerIP": {
      "Value": {"Fn::GetAtt": ["WebInstance", "PrivateIp"] },
      "Description": "The IP address of the Web server."
    }
  }
}   

